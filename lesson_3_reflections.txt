When would you want to use a remote repository rather than keeping all your work local?

  Remote repository, would be ideal for collaborative project, when there are multiple people contributing 
  from different location on the same project.


 Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

 	1. Github, has commits from other people, and sometimes we need to work on progress and goal that we have set in local git repository and not be interfered by others.
 	2. So that we can pull and update only when it is required.
 	3. Other people might have deleted some lines which I wanted in the file Or added something which i didnt want, which will lead to conflict and will pop up randomly while I am busy working on something. This will cause frequent distraction from the current work to resolve the conflict.


 Describe the differences between forks, clones, and branches. When would you use one instead of another?

 	The differences are
 	
 	Fork : is a clone of the repository done on GitHub.
 	Uses: I would use this only when I like X's repository and want to create something new for myself. This will allow me to work independently without affecting original source repository of X's

 	Clone: is a copy of the repository made from remote GitHub server to my local system.
 	Uses: I would use this to copy repository from remote repository to my local system. 
 	It allows me to make changes local system.

 	Branch: is copy of master branch and it allows to make changes to the branch without affecting the master branch.
 	Uses: I would use this when adding new feature or experiment so that it wont affect the master branch.


 What is the benefit of having a copy of the last known state of the remote stored locally?

 	The benefit of having a copy of the last known state of the remote stored locally are:
 	we can use git diff and git log to check the difference and compare between the most recent uptodate copy of remote, by storing it locally and the local state. This will not be possible if we didn't had the uptodate copy of the remote state stored locally. 


 How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

 	I would collaborate using files being saved in locally and then send the file using email, or chat messenger or passing flash drive or use dropbox.
 	It would be easier to how to do, but very hard to track changes, updates , errors, checkout other persons file versions, especially for a large project.
 	Everyone has different version and might name main master file differently, if someone accidently changes the main file name, it result in loss of our backup master file.
 	With git, all these problems are solved using branches.


 When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

 	I would make changes seperately in branch than in master when I want to add new feature, or anything that is uncertain or has significant change. So that the master remains intact as a backup. 
 	Also I would make any changes to the branch so that i can compare it to remote master and see if there is any changes that needs to be incorporated into local again, because of other commit added in remote. If I had made changes directly on master, and incase if remote and master are different, then I would have no access to the earlier master file for merge to work. So because of this reason, we should update the local master at the end when all branches and remote conflict are resolved. and update the remote and then update the master from the remote.

 	By having a separate branch, makes a permission based system so that we have at least controls on what types of changes are made to the master branch and when, which safeguard the working master branch from breaking.

 	If project is simple one user and does require only few changes without deleting any, then one can make changes to master directly, otherwise it will be very difficult.